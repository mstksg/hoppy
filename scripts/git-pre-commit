#!/usr/bin/env bash

# This file is part of Hoppy.
#
# Copyright 2015-2024 Bryan Gardiner <bog@khumba.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a Git pre-commit script.  Enable it by symlinking it to
# .git/hooks/pre-commit.

set -euo pipefail  # "Unofficial Bash strict mode."

# Merging these lines won't cause the command to fail (for set -e).
projectDir=$(git rev-parse --git-dir)
projectDir=$(readlink -f "$projectDir")
projectDir=$(dirname "$projectDir")
declare -r projectDir
cd "$projectDir"

if git --no-pager grep -q --cached '\s\+$'; then
    echo
    echo "Trailing whitespace found:"
    echo
    git --no-pager grep -n --cached --no-color '\s\+$'
    whitespaceResult=1
else
    whitespaceResult=0
fi

tabsResult=0
# Tabs are not allowed anywhere in Haskell files.
hsFiles=$(find . -type f -name '*.hs')
if [[ -n $hsFiles ]] && git --no-pager grep -q --cached '	' $hsFiles; then
    if [[ $tabsResult -eq 0 ]]; then
        echo
        echo 'Tabs found:'
        echop
        tabsResult=1
    fi
    git --no-pager grep -n --no-color --cached '	' $hsFiles
fi
# Tabs shouldn't be used for leading whitespace anywhere.
if git ls-files | grep -ve '/Makefile$' -e '/LICENSE$' | \
        xargs git --no-pager grep -q --cached '^	'; then
    if test $tabsResult -eq 0; then
        echo
        echo 'Leading tabs found:'
        echo
        tabsResult=1
    fi
    git ls-files | grep -v '/Makefile$' -e '/LICENSE$' | \
        xargs git --no-pager grep -n --cached --no-color '^	'
fi

# Check for long lines.  Ignore the user's guide, long import statements without
# lists, and long URLs in documentation.
if git --no-pager grep -h --cached '.\{101\}' -- . ':!*/UsersGuide.hs' | \
        grep -qve '^import [^(]\+$' -e '^ *-- <[^>]\+>[^ ]*$'; then
    echo
    echo '>100-char lines found:'
    echo
    git --no-pager grep -n --cached --no-color '.\{101\}' -- . ':!*/UsersGuide.hs' | \
        grep -ve '^[^:]\+:[0-9]\+:import [^(]\+$' -e '^[^:]\+:[0-9]\+: *-- <[^>]\+>[^ ]*$'
    longLinesResult=1
else
    longLinesResult=0
fi

# Check that all files contain copyright and license notices.
legalResult=0

licenseCabalForFile() {
    if [[ $file = std/* ]] || [[ $file = runtime/* ]] || [[ $file = examples/* ]]; then
        echo Apache-2.0
    else
        echo AGPL-3
    fi
}

while read file; do
    set +e
    case "$file" in
        README.md)
            # Due to the multi-license nature of Hoppy, the top-level readme
            # should mention the LICENSE file.
            grep -q '\bLICENSE\b' "$file";;
        *README*)
            # Readmes contain a copyright statement with email addresses, plus a
            # license statement.
            grep -q 'Copyright 2' "$file" && \
                ! grep -q 'Copyright 2[^<]*$' "$file" && \
                case "$file" in
                    std/*|runtime/*|examples/*)
                        grep -qF 'Licensed under the Apache License, Version 2.0' "$file";;
                    *)
                        grep -qF 'GNU Affero General Public License' "$file" && \
                            grep -qF 'either version 3 of the License, or' "$file" && \
                            grep -qF '(at your option) any later version.' "$file";;
                esac;;
        *CHANGELOG*)
            # Changelogs don't need copyright/license notices.
            true;;
        *LICENSE*)
            # License files are assumed to be okay.
            true;;
        *.cabal)
            # Cabal files include a brief copyright statement and specify the
            # license.
            grep -iq '^copyright:.*[a-z]' "$file" && \
                grep -q "^license: $(licenseCabalForFile "$file")\$" "$file";;
        *default.nix)
            # Nix derivations should have their license set correctly.  This
            # includes the general license check.
            head -10 "$file" | grep -q Copyright && \
                (! head -20 "$file" | grep -q 'Copyright[^<]\+$') && \
                case "$file" in
                    std/*|runtime/*|examples/*)
                        head -20 "$file" |
                            grep -qF 'Licensed under the Apache License, Version 2.0' && \
                            grep -q 'license =.*\basl20;' "$file";;
                    *)
                        head -20 "$file" | grep -qF 'GNU Affero General Public License' && \
                            head -20 "$file" | grep -qF 'either version 3 of the License, or' && \
                            head -20 "$file" | grep -qF '(at your option) any later version.' && \
                            grep -q 'license =.*\bagpl3Plus;' "$file";;
                esac;;
        *)
            # Other source files must include copyright statements with email
            # addresses, plus a license statement.
            head -10 "$file" | grep -q Copyright && \
                (! head -20 "$file" | grep -q 'Copyright[^<]\+$') && \
                case "$file" in
                    std/*|runtime/*|examples/*)
                        head -20 "$file" | \
                            grep -qF 'Licensed under the Apache License, Version 2.0';;
                    *)
                        head -20 "$file" | grep -qF 'GNU Affero General Public License' && \
                            head -20 "$file" | grep -qF 'either version 3 of the License, or' && \
                            head -20 "$file" | grep -qF '(at your option) any later version.';;
                esac;;
    esac
    result=$?
    set -e
    if [[ $result -ne 0 ]]; then
        if [[ $legalResult -eq 0 ]]; then
            legalResult=1
            echo
            echo "Missing or bad copyright/license notices for files:"
            echo
        fi
        echo "$file"
    fi
done < <(git ls-files)

# Check that all staged files have copyright notices for the current year.
copyrightYearResult=0
curYear=$(date +%Y)
declare -r curYear
while read file; do
    file="$projectDir/$file"
    # Check for existance -- the file may be staged for deletion.
    if [[ -e $file ]] && ! git grep --cached -i -q "copyright.*$curYear" "$file"; then
        if test $copyrightYearResult -eq 0; then
            echo
            echo "These files are missing copyright notices for $curYear:"
            echo
            copyrightYearResult=1
        fi
        echo "$file"
    fi
done < <(git --no-pager diff --name-only --cached . | grep -ve CHANGELOG -e LICENSE)

if [[ $whitespaceResult -ne 0 ]] || \
    [[ $tabsResult -ne 0 ]] || \
    [[ $longLinesResult -ne 0 ]] || \
    [[ $legalResult -ne 0 ]] || \
    [[ $copyrightYearResult -ne 0 ]]; then
    exit 1
else
    exit 0
fi
